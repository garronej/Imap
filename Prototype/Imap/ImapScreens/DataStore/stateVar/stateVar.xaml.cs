//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.DataStore.stateVar
{
	using System;
	using System.Collections.Generic;

	public class stateVarGlobalStorage
	{
		public static stateVarGlobalStorage Singleton;
		public bool Loading {get;set;}
		private List<WeakReference> registrar; 

		public stateVarGlobalStorage()
		{
			this.registrar = new List<WeakReference>();
		}
		
		static stateVarGlobalStorage()
		{
			Singleton = new stateVarGlobalStorage();
		}

		public void Register(stateVar dataStore)
		{
			this.registrar.Add(new WeakReference(dataStore));
		}

		public void OnPropertyChanged(string property)
		{
			foreach (WeakReference entry in this.registrar)
			{
				if (!entry.IsAlive)
				{
					continue;
				}
				stateVar dataStore = (stateVar)entry.Target;
				dataStore.FirePropertyChanged(property);
			}
		}
		
		public bool AssignementAllowed
		{
			get
			{
				// Only assign from loading once
				if(this.Loading && this.registrar.Count > 0)
				{
					return false;
				}
				
				return true;
			}
		}

		private double _idSelectedPlace = 0;

		public double idSelectedPlace
		{
			get
			{
				return this._idSelectedPlace;
			}

			set
			{
				if(!this.AssignementAllowed)
				{
					return;
				}
				
				if (this._idSelectedPlace != value)
				{
					this._idSelectedPlace = value;
					this.OnPropertyChanged("idSelectedPlace");
				}
			}
		}

		private string _userName = string.Empty;

		public string userName
		{
			get
			{
				return this._userName;
			}

			set
			{
				if(!this.AssignementAllowed)
				{
					return;
				}
				
				if (this._userName != value)
				{
					this._userName = value;
					this.OnPropertyChanged("userName");
				}
			}
		}

		private bool _isLoged = false;

		public bool isLoged
		{
			get
			{
				return this._isLoged;
			}

			set
			{
				if(!this.AssignementAllowed)
				{
					return;
				}
				
				if (this._isLoged != value)
				{
					this._isLoged = value;
					this.OnPropertyChanged("isLoged");
				}
			}
		}
	}

	public class stateVar : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public void FirePropertyChanged(string propertyName)
		{
			this.OnPropertyChanged(propertyName);
		}

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public stateVar()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Imap.Screens;component/DataStore/stateVar/stateVar.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					stateVarGlobalStorage.Singleton.Loading = true;
					System.Windows.Application.LoadComponent(this, resourceUri);
					stateVarGlobalStorage.Singleton.Loading = false;
					stateVarGlobalStorage.Singleton.Register(this);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private double _idSelectedPlace = 0;

		public double idSelectedPlace
		{
			get
			{
				return stateVarGlobalStorage.Singleton.idSelectedPlace;
			}

			set
			{
				stateVarGlobalStorage.Singleton.idSelectedPlace = value;
			}
		}

		private string _userName = string.Empty;

		public string userName
		{
			get
			{
				return stateVarGlobalStorage.Singleton.userName;
			}

			set
			{
				stateVarGlobalStorage.Singleton.userName = value;
			}
		}

		private bool _isLoged = false;

		public bool isLoged
		{
			get
			{
				return stateVarGlobalStorage.Singleton.isLoged;
			}

			set
			{
				stateVarGlobalStorage.Singleton.isLoged = value;
			}
		}
	}
}
